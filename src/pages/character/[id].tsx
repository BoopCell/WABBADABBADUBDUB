import { Character as CharacterResponse, Episode } from "@types";
import { GetServerSideProps } from "next";
import { useRouter } from "next/router";
import Header from "@components/Header";
import Head from "next/head";
import CharacterCard from "@components/CharacterCard";

const Character = ({
  characterData,
  starringEpisodes,
}: {
  characterData: CharacterResponse;
  starringEpisodes: Episode[];
}): JSX.Element => {
  const router = useRouter();
  const {
    id,
    name,
    status,
    species,
    type,
    gender,
    origin,
    location,
    image,
    episode,
    url,
    created,
  } = characterData;

  return (
    <>
      <Head>
        <title>Rick & Morty</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <CharacterCard
        id={id}
        name={name}
        status={status}
        species={species}
        type={type}
        gender={gender}
        origin={origin}
        location={location}
        image={image}
        episode={episode}
        url={url}
        created={created}
      />
      {starringEpisodes.map((starringEpisode) => (
        <li key={starringEpisode.id}>
          <a
            onClick={() =>
              router.push(`../episode/${starringEpisode.url.slice(-2)}`)
            }
          >
            <h4>{starringEpisode.name}</h4>
          </a>
        </li>
      ))}
      <button
        type="button"
        title="Go back"
        role="link"
        onClick={() => router.back()}
      >
        Back
      </button>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<{
  characterData: CharacterResponse;
  starringEpisodes: Episode[];
}> = async (context) => {
  const res = await fetch(
    `https://rickandmortyapi.com/api/character/${context.params?.id}`
  );
  /* const res = await fetch("https://rickandmortyapi.com/api/location");
  const res = await fetch("https://rickandmortyapi.com/api/episode"); */
  const characterData: CharacterResponse = await res.json();
  const { episode } = characterData;
  const starringEpisodes = await Promise.all(
    episode.map(async (starringEpisode) => {
      const res = await fetch(
        `https://rickandmortyapi.com/api/episode/${starringEpisode.slice(-2)}`
      );
      const episode: Episode = await res.json();
      return episode;
    })
  );
  return { props: { characterData, starringEpisodes } };
};

export default Character;
