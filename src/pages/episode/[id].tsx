import { Character, Episode as EpisodeProps } from "@types";
import Image from "next/image";
import { GetServerSideProps } from "next";
import { useRouter } from "next/router";
import Head from "next/head";
import Header from "@components/Header/Header";

const Episode = ({
  episodeData,
  starringCharacters,
}: {
  episodeData: EpisodeProps;
  starringCharacters: Character[];
}): JSX.Element => {
  const router = useRouter();
  return (
    <>
      <Head>
        <title>Rick & Morty</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <figure>
        <figcaption>
          <h1>{episodeData.name}</h1>
          <h2>Episode: {episodeData.episode}</h2>
          <h3>Air date: {episodeData.air_date}</h3>
          <h3>Creation date: {episodeData.created}</h3>
          <ul>
            {starringCharacters.map((starringCharacter) => (
              <li key={starringCharacter.id}>
                <a
                  onClick={() =>
                    router.push(
                      `../character/${starringCharacter.url.slice(-2)}`
                    )
                  }
                >
                  <h4>{starringCharacter.name}</h4>
                  <Image
                    alt={starringCharacter.image}
                    src={starringCharacter.image}
                    width={50}
                    height={50}
                  />
                </a>
              </li>
            ))}
          </ul>
        </figcaption>
      </figure>
      <button
        type="button"
        title="Go back"
        role="link"
        onClick={() => router.back()}
      >
        Back
      </button>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<{
  episodeData: EpisodeProps;
  starringCharacters: Character[];
}> = async (context) => {
  const res = await fetch(
    `https://rickandmortyapi.com/api/episode/${context.params?.id}`
  );
  const episodeData: EpisodeProps = await res.json();
  const { characters } = episodeData;
  const starringCharacters = await Promise.all(
    characters.map(async (resident) => {
      const res = await fetch(
        `https://rickandmortyapi.com/api/character/${resident.slice(-2)}`
      );
      const character: Character = await res.json();
      return character;
    })
  );
  return { props: { episodeData, starringCharacters } };
};

export default Episode;
